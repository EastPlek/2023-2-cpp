

=============================================
 Upload Time : 11/27/23 Monday 17:36:55
=============================================

//-----------------------------------------------------------------------------
// 2023학년 2학기 c++ 11월 27일 | 월 | 9 ~ 10 수 |  7 ~ 8		      (13주 1일)
// 
// 2023. 12. 11 월요일 (15주 1) - 한 학기 정리, 책소개 , 종강
// 2023. 12. 13 수요일 (15주 2) - 기말 시험, 12월 18일 월요일 - 성적 게시
// 
//-----------------------------------------------------------------------------
// 사용자 정의 자료형
//-----------------------------------------------------------------------------
// 과제 - 나만의 자료형을 많이 만들어 볼 것.
//-----------------------------------------------------------------------------

#include <iostream>

#include "save.h"

int main(void)
{
	//부모와 자식간의 관계
	save("31.cpp", "FileOutput\\2023_11_27 CPP 31-output", std::ios::app, true);

}


=============================================
 Upload Time : 11/27/23 Monday 18:38:05
=============================================

//-----------------------------------------------------------------------------
// 2023학년 2학기 c++ 11월 27일 | 월 | 9 ~ 10 수 |  7 ~ 8		      (13주 1일)
// 
// 2023. 12. 11 월요일 (15주 1) - 한 학기 정리, 책소개 , 종강
// 2023. 12. 13 수요일 (15주 2) - 기말 시험, 12월 18일 월요일 - 성적 게시
// 
//-----------------------------------------------------------------------------
// 사용자 정의 자료형
//-----------------------------------------------------------------------------
// 과제 - 나만의 자료형을 많이 만들어 볼 것.
//-----------------------------------------------------------------------------

#include <iostream>

#include "save.h"

class Animal {
	int age;
public:
	 void move() const {
		std::cout << "동물, 움직인다." << '\n';
	}
};
class Dog :public  Animal {
	bool bite;
public:
	void move() const { // 조상의 멤버를 오버라이딩 하였다.
		std::cout << "개, 뛴다." << '\n';
	}
};
class Bird :public  Animal {
	char fly;
public:
	void move() const { // 
		std::cout << "새, 난다." << '\n';
	}

};

int main(void)
{
	//다형성이라는 유연성을 해결하기 위해 메모리를 더 사용한다.
	// 
	std::cout << sizeof Dog << '\n';

	Dog d; // vs환경에서는 없는 객체를 1바이트로 표현
	Bird b;

	Animal* p = &d;
	p->move();
	// (*p).move();
	// Animal.move()
	// dynamic binding (virtual)
	// 메모리를 엄청 잡아먹는 대신 유연성을 확보한다.


	p = &b;
	p->move();


	save("31.cpp", "FileOutput\\2023_11_27 CPP 31-output", std::ios::app, true);

}


=============================================
 Upload Time : 11/27/23 Monday 18:52:14
=============================================

//-----------------------------------------------------------------------------
// 2023학년 2학기 c++ 11월 27일 | 월 | 9 ~ 10 수 |  7 ~ 8		      (13주 1일)
// 
// 2023. 12. 11 월요일 (15주 1) - 한 학기 정리, 책소개 , 종강
// 2023. 12. 13 수요일 (15주 2) - 기말 시험, 12월 18일 월요일 - 성적 게시
// 
//-----------------------------------------------------------------------------
// 사용자 정의 자료형
//-----------------------------------------------------------------------------
// 과제 - 나만의 자료형을 많이 만들어 볼 것.
//-----------------------------------------------------------------------------

#include <iostream>

#include "save.h"

// c++에서 다형성을 구현하는 키워드 - virtual
// 어떤 클래스가 virtual 멤버를 만들면 멤버도 virtual
class Animal {
	int age;
public:
	 virtual void move() const {
		std::cout << "동물, 움직인다." << '\n';
	}
};
class Dog :public  Animal {
	bool bite;
public:
	virtual void move() const override { // 조상의 멤버를 오버라이딩 하였다.
		std::cout << "개, 뛴다." << '\n';
	}
};
class Bird :public  Animal {
	long long fly;
public:
	virtual void move() const override final { // 
		std::cout << "새, 난다." << '\n';
	}

};

int main(void)
{
	//다형성이라는 유연성을 해결하기 위해 메모리를 더 사용한다.
	// 
	std::cout << sizeof Bird << '\n';

	Dog d; // vs환경에서는 없는 객체를 1바이트로 표현
	Bird b;

	Animal* p = &d;
	p->move();
	// (*p).move();
	// Animal.move()
	// dynamic binding (virtual)
	// 메모리를 엄청 잡아먹는 대신 유연성을 확보한다.

	// virtual의 원리
	// STACK
	// Dog d - 16 {8 +  8 (virtual)}
	// bird b - 24  {8 + 8 (long long fly )  + 8(virtual)}
	// p - 8 (pointer)

	// vptr 추적기 (virtual pointer)
	// Dog를 가리키면 Dog가 가지고 있는 가상함수 테이블 (vtbl) 을 만든다.
	// Dog의 vtbl - Dog의 move
	// Bird도 vtbl를 갖고 있다.
	// p->move를 하면 dog의 vptr를 간접 참조
	// 시간이 조금 걸리지만 유연성을 확보


	p = &b;
	p->move();


	save("31.cpp", "FileOutput\\2023_11_27 CPP 31-output", std::ios::app, true);

}


=============================================
 Upload Time : 11/27/23 Monday 19:01:22
=============================================

//-----------------------------------------------------------------------------
// 2023학년 2학기 c++ 11월 27일 | 월 | 9 ~ 10 수 |  7 ~ 8		      (13주 1일)
// 
// 2023. 12. 11 월요일 (15주 1) - 한 학기 정리, 책소개 , 종강
// 2023. 12. 13 수요일 (15주 2) - 기말 시험, 12월 18일 월요일 - 성적 게시
// 
//-----------------------------------------------------------------------------
// 사용자 정의 자료형
//-----------------------------------------------------------------------------
// 과제 - 나만의 자료형을 많이 만들어 볼 것.
//-----------------------------------------------------------------------------

#include <iostream>
#include <chrono>
#include <random>
#include "save.h"

std::default_random_engine dre{ static_cast<unsigned int>(std::chrono::system_clock::now().time_since_epoch().count())};
std::uniform_int_distribution uid{};


// c++에서 다형성을 구현하는 키워드 - virtual
// 어떤 클래스가 virtual 멤버를 만들면 멤버도 virtual
class Animal {
public:
	 virtual void move() const {
		std::cout << "동물, 움직인다." << '\n';
	}
};
class Dog :public  Animal {
public:
	virtual void move() const override { // 조상의 멤버를 오버라이딩 하였다.
		std::cout << "개, 뛴다." << '\n';
	}
};
class Bird :public  Animal {
public:
	virtual void move() const override final { // 
		std::cout << "새, 난다." << '\n';
	}

};

// [문제] 동물 10마리를 관리하는코드를 만든다.
int main(void)
{
	Animal* app[10];
	for (Animal*& ap : app) {
		if (uid(dre) % 2 == 0) {
			ap = new Dog;
		}
		else {
			ap = new Bird;
		}
	}

	for (const Animal* ap : app) {
		ap->move();
	}
	save("31.cpp", "FileOutput\\2023_11_27 CPP 31-output", std::ios::app, true);

}
